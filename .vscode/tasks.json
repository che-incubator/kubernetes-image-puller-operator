{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Compile code",
            "command": "make compile -s",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Format code",
            "command": "go fmt ./...",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Update golang dependencies",
            "command": "go mod tidy",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Run unit tests",
            "command": "make test",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Update OLM bundle",
            "command": "make bundle -s",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Update CR/CRDs",
            "command": "make generate manifests -s",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Build and push custom operator image: '${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/kubernetes-image-puller-operator:next'",
            "command": "make docker-build docker-push IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/kubernetes-image-puller-operator:next\"",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Install OLM on the cluster",
            "command": "operator-sdk olm install",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Build and push development bundle",
            "command": "export BUNDLE_IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/kubernetes-image-puller-operator-bundle:next\"; make bundle IMG=${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/kubernetes-image-puller-operator:next -s; make bundle-build bundle-push -s BUNDLE_IMG=${BUNDLE_IMG}",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Install operator via OLM",
            "command": "kubectl apply -f config/manager/controller-namespace.yaml; operator-sdk run bundle ${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/kubernetes-image-puller-operator-bundle:next --namespace ${NAMESPACE}; kubectl apply -f config/samples/che_v1alpha1_kubernetesimagepuller.yaml -n ${NAMESPACE}",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build",
            "options": {
                "env": {
                    "NAMESPACE": "kubernetes-image-puller-operator"
                }
            }
        },
        {
            "label": "Uninstall operator via OLM",
            "command": "operator-sdk cleanup kubernetes-imagepuller-operator --namespace ${NAMESPACE}",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build",
            "options": {
                "env": {
                    "NAMESPACE": "kubernetes-image-puller-operator"
                }
            }
        },
        {
            "label": "Deploy operator",
            "command": "make deploy IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/kubernetes-image-puller-operator:next\" -s; kubectl apply -f config/samples/che_v1alpha1_kubernetesimagepuller.yaml -n \"${NAMESPACE}\"",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build",
            "options": {
                "env": {
                    "NAMESPACE": "kubernetes-image-puller-operator"
                }
            }
        },
        {
            "label": "Undeploy operator",
            "command": "make undeploy -s",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
    ]
}
